// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jFJFziXZKhcspnrEU1bpXe
// Component: STkNCpl7YJqt

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { useScreenVariants as useScreenVariantsyX0GVx02K4UjjJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: yX0gVX02K4ujjJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jFJFziXZKhcspnrEU1bpXe/projectcss
import sty from "./PlasmicLinks.module.css"; // plasmic-import: STkNCpl7YJqt/css

import DiscordIcon from "./icons/PlasmicIcon__Discord"; // plasmic-import: WJNGrtuv_aVc/icon
import InstaIcon from "./icons/PlasmicIcon__Insta"; // plasmic-import: 8qRdBmBY9oSD/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: -vyGrr9Bwjqv/icon

createPlasmicElementProxy;

export type PlasmicLinks__VariantMembers = {};
export type PlasmicLinks__VariantsArgs = {};
type VariantPropType = keyof PlasmicLinks__VariantsArgs;
export const PlasmicLinks__VariantProps = new Array<VariantPropType>();

export type PlasmicLinks__ArgsType = {};
type ArgPropType = keyof PlasmicLinks__ArgsType;
export const PlasmicLinks__ArgProps = new Array<ArgPropType>();

export type PlasmicLinks__OverridesType = {
  root?: Flex__<"div">;
  frame1?: Flex__<"div">;
  img288811?: Flex__<"div">;
  redCrownLogoWhiteTransparent11?: Flex__<"div">;
  frame15?: Flex__<"div">;
  frame14?: Flex__<"div">;
  frame13?: Flex__<"div">;
  frame12?: Flex__<"div">;
  frame10?: Flex__<"div">;
  group1?: Flex__<"div">;
  frame9?: Flex__<"div">;
  frame11?: Flex__<"div">;
  group2?: Flex__<"div">;
  frame8?: Flex__<"div">;
};

export interface DefaultLinksProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLinks__RenderFunc(props: {
  variants: PlasmicLinks__VariantsArgs;
  args: PlasmicLinks__ArgsType;
  overrides: PlasmicLinks__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyX0GVx02K4UjjJ()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"frame1"}
            data-plasmic-override={overrides.frame1}
            className={classNames(projectcss.all, sty.frame1)}
          >
            {false ? (
              <div
                data-plasmic-name={"img288811"}
                data-plasmic-override={overrides.img288811}
                className={classNames(projectcss.all, sty.img288811)}
              />
            ) : null}
            <div
              data-plasmic-name={"redCrownLogoWhiteTransparent11"}
              data-plasmic-override={overrides.redCrownLogoWhiteTransparent11}
              className={classNames(
                projectcss.all,
                sty.redCrownLogoWhiteTransparent11
              )}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"frame15"}
              data-plasmic-override={overrides.frame15}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame15)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame14"}
                data-plasmic-override={overrides.frame14}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame14)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame13"}
                  data-plasmic-override={overrides.frame13}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame13)}
                >
                  <DiscordIcon
                    className={classNames(projectcss.all, sty.svg__eY9Gl)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToHttpsDiscordComInviteMv6CbgfBcz"] = true
                        ? (() => {
                            const actionArgs = {
                              destination:
                                "https://discord.com/invite/mv6cbgfBCZ"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpsDiscordComInviteMv6CbgfBcz"] != null &&
                        typeof $steps["goToHttpsDiscordComInviteMv6CbgfBcz"] ===
                          "object" &&
                        typeof $steps["goToHttpsDiscordComInviteMv6CbgfBcz"]
                          .then === "function"
                      ) {
                        $steps["goToHttpsDiscordComInviteMv6CbgfBcz"] =
                          await $steps["goToHttpsDiscordComInviteMv6CbgfBcz"];
                      }
                    }}
                    role={"img"}
                  />

                  <InstaIcon
                    className={classNames(projectcss.all, sty.svg__rBcf)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToHttpsWwwInstagramComRedcrownEvents"] = true
                        ? (() => {
                            const actionArgs = {
                              destination:
                                "https://www.instagram.com/redcrown.events/"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpsWwwInstagramComRedcrownEvents"] !=
                          null &&
                        typeof $steps[
                          "goToHttpsWwwInstagramComRedcrownEvents"
                        ] === "object" &&
                        typeof $steps["goToHttpsWwwInstagramComRedcrownEvents"]
                          .then === "function"
                      ) {
                        $steps["goToHttpsWwwInstagramComRedcrownEvents"] =
                          await $steps[
                            "goToHttpsWwwInstagramComRedcrownEvents"
                          ];
                      }
                    }}
                    role={"img"}
                  />

                  <VectorIcon
                    className={classNames(projectcss.all, sty.svg___8LprH)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToHttpsWwwTiktokComRedcrownEvents"] = true
                        ? (() => {
                            const actionArgs = {
                              destination:
                                "https://www.tiktok.com/@redcrown.events"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpsWwwTiktokComRedcrownEvents"] != null &&
                        typeof $steps["goToHttpsWwwTiktokComRedcrownEvents"] ===
                          "object" &&
                        typeof $steps["goToHttpsWwwTiktokComRedcrownEvents"]
                          .then === "function"
                      ) {
                        $steps["goToHttpsWwwTiktokComRedcrownEvents"] =
                          await $steps["goToHttpsWwwTiktokComRedcrownEvents"];
                      }
                    }}
                    role={"img"}
                  />
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame12"}
                data-plasmic-override={overrides.frame12}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame12)}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"frame10"}
                data-plasmic-override={overrides.frame10}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame10)}
              >
                <div
                  data-plasmic-name={"group1"}
                  data-plasmic-override={overrides.group1}
                  className={classNames(projectcss.all, sty.group1)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame9"}
                    data-plasmic-override={overrides.frame9}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame9)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__axVXa)}
                      loading={"lazy"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6MUd8
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "smallMobile") ? (
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h6
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h6,
                                  projectcss.__wab_text,
                                  sty.h6__rKtBx
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                ) ? (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "#E5F732",
                                        fontWeight: 800
                                      }}
                                    >
                                      {"3/28"}
                                    </span>
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "#E5F732",
                                        fontWeight: 800
                                      }}
                                    >
                                      {"3/28"}
                                    </span>
                                  </React.Fragment>
                                )}
                              </h6>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h6
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h6,
                                  projectcss.__wab_text,
                                  sty.h6__rKtBx
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                ) ? (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "#E5F732",
                                        fontWeight: 800
                                      }}
                                    >
                                      {"3/28"}
                                    </span>
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "#E5F732",
                                        fontWeight: 800
                                      }}
                                    >
                                      {"3/28"}
                                    </span>
                                  </React.Fragment>
                                )}
                              </h6>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        )}
                      </div>
                    </div>
                  </Stack__>
                </div>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__fhZTy)}
                  href={
                    "https://sickening.events/e/red-crown-presents-kpop-bash"
                  }
                  onClick={async () => {
                    const $steps = {};
                  }}
                  shape={"round"}
                  size={"large"}
                  target={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? true
                      : true
                  }
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rzzTc)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iu28B
                      )}
                    >
                      {"KoreaFest Pre-Party"}
                    </div>
                  </div>
                </AntdButton>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame11"}
                data-plasmic-override={overrides.frame11}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame11)}
              >
                <div
                  data-plasmic-name={"group2"}
                  data-plasmic-override={overrides.group2}
                  className={classNames(projectcss.all, sty.group2)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame8"}
                    data-plasmic-override={overrides.frame8}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame8)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ybz4A)}
                      loading={"lazy"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9JIv
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__nBozZ
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#E5F732", fontWeight: 800 }}
                                >
                                  {"8/31"}
                                </span>
                              </React.Fragment>
                            </h6>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                  </Stack__>
                </div>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__ltwBu)}
                  href={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? "https://www.etix.com/ticket/p/73949774/kpop-bash-with-dj-rusty-charlotte-amossouthend"
                      : hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "https://www.etix.com/ticket/p/73949774/kpop-bash-with-dj-rusty-charlotte-amossouthend"
                      : "https://www.etix.com/ticket/p/73949774/kpop-bash-with-dj-rusty-charlotte-amossouthend"
                  }
                  shape={"round"}
                  size={"large"}
                  target={true}
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ngHpH)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zafL
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "smallMobile")
                        ? "K-Pop Bash Charlotte"
                        : "K-Pop Bash Charlotte"}
                    </div>
                  </div>
                </AntdButton>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__oa3Js)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__mq3R3)}
                  href={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? "https://forms.gle/ZMKX3fYo2D1RkcnG6"
                      : "https://forms.gle/ZMKX3fYo2D1RkcnG6"
                  }
                  shape={"round"}
                  size={"large"}
                  target={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? true
                      : true
                  }
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pBt5K)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bOsk
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "smallMobile")
                        ? "K-Pop Bash Raleigh Requests"
                        : "K-Pop Bash Raleigh Requests"}
                    </div>
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hjat1)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button___9Cm4U)}
                  href={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? "https://forms.gle/gELnz3XPMZeJjzF68"
                      : hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "https://forms.gle/gELnz3XPMZeJjzF68"
                      : "https://forms.gle/gELnz3XPMZeJjzF68"
                  }
                  shape={"round"}
                  size={"large"}
                  target={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? true
                      : true
                  }
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hRn4A)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4YxBo
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "smallMobile")
                        ? "K-Pop Bash Raleigh Requests"
                        : "K-Pop Bash Raleigh Requests"}
                    </div>
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vc5Wy)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__npWhs)}
                  href={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? "https://redcrownevents.us21.list-manage.com/subscribe?u=9e9b039b63ee9638ad26286d6&id=814c8fe7f0"
                      : "https://redcrownevents.us21.list-manage.com/subscribe?u=9e9b039b63ee9638ad26286d6&id=814c8fe7f0"
                  }
                  shape={"round"}
                  size={"large"}
                  target={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? true
                      : true
                  }
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__h4Vhs)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dThUj
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "smallMobile")
                        ? "Join our Mailing List!"
                        : "Join our Mailing List!"}
                    </div>
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__uyXuz)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__yDNlC)}
                  href={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? `/`
                      : `/`
                  }
                  shape={"round"}
                  size={"large"}
                  target={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? true
                      : true
                  }
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__epqPn)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kzjrP
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "smallMobile")
                        ? "Red Crown Website"
                        : "Red Crown Website"}
                    </div>
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__fgmi5)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__oLxX)}
                  href={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? "mailto:rusty@redcrown.events"
                      : hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "mailto:rusty@redcrown.events"
                      : "mailto:rusty@redcrown.events"
                  }
                  shape={"round"}
                  size={"large"}
                  target={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? true
                      : true
                  }
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___312Im)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hcPcF
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "smallMobile")
                        ? "Contact Us!"
                        : "Contact Us!"}
                    </div>
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__cv98P)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__oxZqO)}
                  href={"https://forms.gle/HbkDVogeGLzgQ84k8"}
                  shape={"round"}
                  size={"large"}
                  target={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? true
                      : true
                  }
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ieXWr)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fPL
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "smallMobile")
                        ? "Richmond K-pop Bash Requests"
                        : "Richmond K-pop Bash Requests"}
                    </div>
                  </div>
                </AntdButton>
              </div>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame1",
    "img288811",
    "redCrownLogoWhiteTransparent11",
    "frame15",
    "frame14",
    "frame13",
    "frame12",
    "frame10",
    "group1",
    "frame9",
    "frame11",
    "group2",
    "frame8"
  ],
  frame1: [
    "frame1",
    "img288811",
    "redCrownLogoWhiteTransparent11",
    "frame15",
    "frame14",
    "frame13",
    "frame12",
    "frame10",
    "group1",
    "frame9",
    "frame11",
    "group2",
    "frame8"
  ],
  img288811: ["img288811"],
  redCrownLogoWhiteTransparent11: ["redCrownLogoWhiteTransparent11"],
  frame15: [
    "frame15",
    "frame14",
    "frame13",
    "frame12",
    "frame10",
    "group1",
    "frame9",
    "frame11",
    "group2",
    "frame8"
  ],
  frame14: ["frame14", "frame13"],
  frame13: ["frame13"],
  frame12: ["frame12"],
  frame10: ["frame10", "group1", "frame9"],
  group1: ["group1", "frame9"],
  frame9: ["frame9"],
  frame11: ["frame11", "group2", "frame8"],
  group2: ["group2", "frame8"],
  frame8: ["frame8"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame1: "div";
  img288811: "div";
  redCrownLogoWhiteTransparent11: "div";
  frame15: "div";
  frame14: "div";
  frame13: "div";
  frame12: "div";
  frame10: "div";
  group1: "div";
  frame9: "div";
  frame11: "div";
  group2: "div";
  frame8: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLinks__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLinks__VariantsArgs;
    args?: PlasmicLinks__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLinks__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLinks__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLinks__ArgProps,
          internalVariantPropNames: PlasmicLinks__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLinks__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLinks";
  } else {
    func.displayName = `PlasmicLinks.${nodeName}`;
  }
  return func;
}

export const PlasmicLinks = Object.assign(
  // Top-level PlasmicLinks renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame1: makeNodeComponent("frame1"),
    img288811: makeNodeComponent("img288811"),
    redCrownLogoWhiteTransparent11: makeNodeComponent(
      "redCrownLogoWhiteTransparent11"
    ),
    frame15: makeNodeComponent("frame15"),
    frame14: makeNodeComponent("frame14"),
    frame13: makeNodeComponent("frame13"),
    frame12: makeNodeComponent("frame12"),
    frame10: makeNodeComponent("frame10"),
    group1: makeNodeComponent("group1"),
    frame9: makeNodeComponent("frame9"),
    frame11: makeNodeComponent("frame11"),
    group2: makeNodeComponent("group2"),
    frame8: makeNodeComponent("frame8"),

    // Metadata about props expected for PlasmicLinks
    internalVariantProps: PlasmicLinks__VariantProps,
    internalArgProps: PlasmicLinks__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLinks;
/* prettier-ignore-end */

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jFJFziXZKhcspnrEU1bpXe
// Component: MxvU_cyYFXz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsyX0GVx02K4UjjJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: yX0gVX02K4ujjJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jFJFziXZKhcspnrEU1bpXe/projectcss
import sty from "./PlasmicPageFooter.module.css"; // plasmic-import: MxvU_cyYFXz/css

createPlasmicElementProxy;

export type PlasmicPageFooter__VariantMembers = {};
export type PlasmicPageFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicPageFooter__VariantsArgs;
export const PlasmicPageFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicPageFooter__ArgsType = {};
type ArgPropType = keyof PlasmicPageFooter__ArgsType;
export const PlasmicPageFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicPageFooter__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
};

export interface DefaultPageFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPageFooter__RenderFunc(props: {
  variants: PlasmicPageFooter__VariantsArgs;
  args: PlasmicPageFooter__ArgsType;
  overrides: PlasmicPageFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyX0GVx02K4UjjJ()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.column___7Wg5C)}>
        <div className={classNames(projectcss.all, sty.columns___9YvsB)}>
          <div className={classNames(projectcss.all, sty.column__o2SIb)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__w0Xy)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/red_crown/images/image3.png",
                fullWidth: 3000,
                fullHeight: 3000,
                aspectRatio: undefined
              }}
            />
          </div>
          <div className={classNames(projectcss.all, sty.column__aIsc)}>
            <div className={classNames(projectcss.all, sty.freeBox___9YCd)}>
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__gxT7N
                    )}
                    component={Link}
                    href={`/Terms Of Service`}
                    platform={"nextjs"}
                  >
                    {"Terms of Service"}
                  </PlasmicLink__>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__v47A0
                    )}
                    component={Link}
                    href={
                      hasVariant(globalVariants, "screen", "smallMobile")
                        ? `/PrivacyPolicy`
                        : `/PrivacyPolicy`
                    }
                    platform={"nextjs"}
                  >
                    {"Privacy Policy"}
                  </PlasmicLink__>
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qzMo8
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"Copyright \u00a9 2023 Red Crown, LLC"}
                    </span>
                  </React.Fragment>
                </div>
              </section>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__rmL5)}
                displayHeight={"50px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/red_crown/images/image3.png",
                  fullWidth: 3000,
                  fullHeight: 3000,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.column__wjCni)}>
        <div className={classNames(projectcss.all, sty.columns__xnhWh)}>
          <div className={classNames(projectcss.all, sty.column__taIjw)}>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__zxSs3
              )}
              component={Link}
              href={`/Terms Of Service`}
              platform={"nextjs"}
            >
              {"Terms of Service"}
            </PlasmicLink__>
          </div>
          <div className={classNames(projectcss.all, sty.column__gq8Kv)}>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__nChJm
              )}
              component={Link}
              href={`/PrivacyPolicy`}
              platform={"nextjs"}
            >
              {"Privacy Policy"}
            </PlasmicLink__>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.columns__s1JiJ)}>
          <div className={classNames(projectcss.all, sty.column__g0N0H)}>
            <div className={classNames(projectcss.all, sty.freeBox___3VPo)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j2Ovi
                )}
              >
                {"Partners:"}
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__tdz8N)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"98px"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHttpsWwwNckoreafestCom"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: "https://www.nckoreafest.com"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHttpsWwwNckoreafestCom"] != null &&
                    typeof $steps["goToHttpsWwwNckoreafestCom"] === "object" &&
                    typeof $steps["goToHttpsWwwNckoreafestCom"].then ===
                      "function"
                  ) {
                    $steps["goToHttpsWwwNckoreafestCom"] = await $steps[
                      "goToHttpsWwwNckoreafestCom"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/red_crown/images/image5.png",
                  fullWidth: 2389,
                  fullHeight: 1358,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section"],
  section: ["section"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPageFooter__VariantsArgs;
    args?: PlasmicPageFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPageFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPageFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPageFooter__ArgProps,
          internalVariantPropNames: PlasmicPageFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPageFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageFooter";
  } else {
    func.displayName = `PlasmicPageFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicPageFooter = Object.assign(
  // Top-level PlasmicPageFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),

    // Metadata about props expected for PlasmicPageFooter
    internalVariantProps: PlasmicPageFooter__VariantProps,
    internalArgProps: PlasmicPageFooter__ArgProps
  }
);

export default PlasmicPageFooter;
/* prettier-ignore-end */

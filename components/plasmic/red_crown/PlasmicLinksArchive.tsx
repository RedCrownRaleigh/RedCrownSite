/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jFJFziXZKhcspnrEU1bpXe
// Component: tHxQuQS5OMC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Analytics from "../../Analytics"; // plasmic-import: n519WuZQnL/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { useScreenVariants as useScreenVariantsyX0GVx02K4UjjJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: yX0gVX02K4ujjJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jFJFziXZKhcspnrEU1bpXe/projectcss
import sty from "./PlasmicLinksArchive.module.css"; // plasmic-import: tHxQuQS5OMC/css

import DiscordIconSvgrepoComSvgIcon from "./icons/PlasmicIcon__DiscordIconSvgrepoComSvg"; // plasmic-import: H-XXIFtkJJRM/icon
import InstagramSvgIcon from "./icons/PlasmicIcon__InstagramSvg"; // plasmic-import: hHRjKbBvS6qv1Q/icon
import LogoTiktokSvgrepoComSvgIcon from "./icons/PlasmicIcon__LogoTiktokSvgrepoComSvg"; // plasmic-import: T9tAHQbMFKPI/icon

createPlasmicElementProxy;

export type PlasmicLinksArchive__VariantMembers = {};
export type PlasmicLinksArchive__VariantsArgs = {};
type VariantPropType = keyof PlasmicLinksArchive__VariantsArgs;
export const PlasmicLinksArchive__VariantProps = new Array<VariantPropType>();

export type PlasmicLinksArchive__ArgsType = {};
type ArgPropType = keyof PlasmicLinksArchive__ArgsType;
export const PlasmicLinksArchive__ArgProps = new Array<ArgPropType>();

export type PlasmicLinksArchive__OverridesType = {
  page?: Flex__<"div">;
  analytics?: Flex__<typeof Analytics>;
  mainContent?: Flex__<"div">;
};

export interface DefaultLinksArchiveProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLinksArchive__RenderFunc(props: {
  variants: PlasmicLinksArchive__VariantsArgs;
  args: PlasmicLinksArchive__ArgsType;
  overrides: PlasmicLinksArchive__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyX0GVx02K4UjjJ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicLinksArchive.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLinksArchive.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLinksArchive.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"page"}
        data-plasmic-override={overrides.page}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.page
        )}
      >
        <Analytics
          data-plasmic-name={"analytics"}
          data-plasmic-override={overrides.analytics}
          className={classNames("__wab_instance", sty.analytics)}
        />

        <section className={classNames(projectcss.all, sty.section__tX9A0)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__pMyW)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"512px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/red_crown/images/notSquareRedCrownLogoPng.png",
              fullWidth: 3000,
              fullHeight: 1146,
              aspectRatio: undefined
            }}
          />

          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__l1Nou)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"512px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/red_crown/images/redCrownLogoVectorSvg.svg",
              fullWidth: 300,
              fullHeight: 121,
              aspectRatio: 2.476945
            }}
          />
        </section>
        <div
          data-plasmic-name={"mainContent"}
          data-plasmic-override={overrides.mainContent}
          className={classNames(projectcss.all, sty.mainContent)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__fV9Y)}>
            <div className={classNames(projectcss.all, sty.columns__pct9J)}>
              <div className={classNames(projectcss.all, sty.column__c3Lv)} />

              <div className={classNames(projectcss.all, sty.column__l6Kt)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button___8WQrs)}
                  href={"https://discord.gg/mv6cbgfBCZ"}
                  onClick={async () => {
                    const $steps = {};
                  }}
                  shape={"round"}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uUsXx)}
                  >
                    <DiscordIconSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__ztIEg)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___78A1R
                      )}
                    >
                      {"Discord"}
                    </div>
                    <DiscordIconSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__iK46P)}
                      role={"img"}
                    />
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.column__mPZxe)} />
            </div>
            <div className={classNames(projectcss.all, sty.columns__aAdsq)}>
              <div className={classNames(projectcss.all, sty.column__njHmc)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__hUTwN)}
                  href={"https://www.instagram.com/redcrown.events"}
                  onClick={async () => {
                    const $steps = {};
                  }}
                  shape={"round"}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xMtJt)}
                  >
                    <InstagramSvgIcon
                      className={classNames(projectcss.all, sty.svg___7GkJa)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uDNrD
                      )}
                    >
                      {"Instagram"}
                    </div>
                    <InstagramSvgIcon
                      className={classNames(projectcss.all, sty.svg__odUje)}
                      role={"img"}
                    />
                  </div>
                </AntdButton>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns___1Ip0E)}>
              <div className={classNames(projectcss.all, sty.column__lsRiu)} />

              <div className={classNames(projectcss.all, sty.column__nOdTa)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__icgj5)}
                  href={"https://www.tiktok.com/@redcrown.events"}
                  onClick={async () => {
                    const $steps = {};
                  }}
                  shape={"round"}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cDdZf)}
                  >
                    <LogoTiktokSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg___79U8I)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q8Gxg
                      )}
                    >
                      {"TikTok"}
                    </div>
                    <LogoTiktokSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__mf8Fb)}
                      role={"img"}
                    />
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.column___6TDif)} />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__obXOo)}>
            <div className={classNames(projectcss.all, sty.columns__dUwKp)}>
              <div className={classNames(projectcss.all, sty.column___2YW6)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button___6SyjL)}
                  href={"https://discord.gg/mv6cbgfBCZ"}
                  onClick={async () => {
                    const $steps = {};
                  }}
                  shape={"round"}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4K8Qc)}
                  >
                    <DiscordIconSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__wNRyQ)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pxvUg
                      )}
                    >
                      {"Discord"}
                    </div>
                    <DiscordIconSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__hG3M)}
                      role={"img"}
                    />
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.column__yPhQc)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__fbTmP)}
                  href={"https://www.instagram.com/redcrown.events"}
                  onClick={async () => {
                    const $steps = {};
                  }}
                  shape={"round"}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rTuR8)}
                  >
                    <InstagramSvgIcon
                      className={classNames(projectcss.all, sty.svg__gvuh)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1M4Q9
                      )}
                    >
                      {"Instagram"}
                    </div>
                    <InstagramSvgIcon
                      className={classNames(projectcss.all, sty.svg__gl4Rx)}
                      role={"img"}
                    />
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.column__m4UdM)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__kjE1)}
                  href={"https://www.tiktok.com/@redcrown.events"}
                  onClick={async () => {
                    const $steps = {};
                  }}
                  shape={"round"}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vOXvC)}
                  >
                    <LogoTiktokSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__e3RWk)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7HHfx
                      )}
                    >
                      {"TikTok"}
                    </div>
                    <LogoTiktokSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg___62D5M)}
                      role={"img"}
                    />
                  </div>
                </AntdButton>
              </div>
            </div>
          </div>
          <section className={classNames(projectcss.all, sty.section___6AL5Z)}>
            <div className={classNames(projectcss.all, sty.freeBox__fuy84)}>
              <AntdButton
                className={classNames("__wab_instance", sty.button___2SoSp)}
                href={
                  "https://www.eventbrite.com/e/k-pop-bash-richmond-tickets-846806590307?aff=oddtdtcreator"
                }
                onClick={async () => {
                  const $steps = {};
                }}
                shape={"round"}
                size={"large"}
                type={"default"}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___4W6NU)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9NbI
                    )}
                  >
                    {"Richmond K-Pop Bash 4/5"}
                  </div>
                </div>
              </AntdButton>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__mvs44)}>
              <AntdButton
                className={classNames("__wab_instance", sty.button__havMe)}
                href={
                  "https://www.eventbrite.com/e/k-pop-bash-february-tickets-814357584457?aff=oddtdtcreator"
                }
                shape={"round"}
                size={"large"}
                target={true}
                type={"default"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__qhJGt)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ucd3R
                    )}
                  >
                    {"K-Pop Bash 2/23 Tickets!"}
                  </div>
                </div>
              </AntdButton>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__bMcq)}>
              <AntdButton
                className={classNames("__wab_instance", sty.button__sKmNu)}
                href={"https://forms.gle/U65h3EnnC6NoRawP8"}
                shape={"round"}
                size={"large"}
                target={true}
                type={"default"}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___7Dg4F)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__czLr
                    )}
                  >
                    {"K-Pop Bash: Generations 3/29"}
                  </div>
                </div>
              </AntdButton>
              <AntdButton
                className={classNames("__wab_instance", sty.button__auDzz)}
                href={"https://forms.gle/Rhbdsz3fqsfkMQjY9"}
                shape={"round"}
                size={"large"}
                type={"default"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__zgwEs)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x20Kn
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile")
                      ? "Raleigh K-pop Bash Requests"
                      : "Raleigh K-pop Bash Requests"}
                  </div>
                </div>
              </AntdButton>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___6NsGi)}>
              <AntdButton
                className={classNames("__wab_instance", sty.button___45BXc)}
                href={"mailto:rusty@redcrown.events"}
                shape={"round"}
                size={"large"}
                type={"default"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__rMIa)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uePiK
                    )}
                  >
                    {"Contact us!"}
                  </div>
                </div>
              </AntdButton>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__miNx9)}>
              <AntdButton
                className={classNames("__wab_instance", sty.button__k6Yp)}
                href={`/home-page`}
                shape={"round"}
                size={"large"}
                type={"default"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__zb4Zk)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Uqm1
                    )}
                  >
                    {"Red Crown Website"}
                  </div>
                </div>
              </AntdButton>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ivJxB)}>
              <AntdButton
                className={classNames("__wab_instance", sty.button__qfqoE)}
                href={"http://eepurl.com/izpp-g"}
                shape={"round"}
                size={"large"}
                target={true}
                type={"default"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__d06N)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___549BO
                    )}
                  >
                    {"Join our Mailing list!"}
                  </div>
                </div>
              </AntdButton>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  page: ["page", "analytics", "mainContent"],
  analytics: ["analytics"],
  mainContent: ["mainContent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  page: "div";
  analytics: typeof Analytics;
  mainContent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLinksArchive__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLinksArchive__VariantsArgs;
    args?: PlasmicLinksArchive__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLinksArchive__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLinksArchive__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLinksArchive__ArgProps,
          internalVariantPropNames: PlasmicLinksArchive__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLinksArchive__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "page") {
    func.displayName = "PlasmicLinksArchive";
  } else {
    func.displayName = `PlasmicLinksArchive.${nodeName}`;
  }
  return func;
}

export const PlasmicLinksArchive = Object.assign(
  // Top-level PlasmicLinksArchive renders the root element
  makeNodeComponent("page"),
  {
    // Helper components rendering sub-elements
    analytics: makeNodeComponent("analytics"),
    mainContent: makeNodeComponent("mainContent"),

    // Metadata about props expected for PlasmicLinksArchive
    internalVariantProps: PlasmicLinksArchive__VariantProps,
    internalArgProps: PlasmicLinksArchive__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home page",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLinksArchive;
/* prettier-ignore-end */

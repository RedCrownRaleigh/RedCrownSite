// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jFJFziXZKhcspnrEU1bpXe
// Component: g1huIxoWqF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Analytics from "../../Analytics"; // plasmic-import: n519WuZQnL/component
import PageHeader from "../../PageHeader"; // plasmic-import: eDzLCW1ZjEb/component
import NavBar from "../../NavBar"; // plasmic-import: 5wmWvgxHSq/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import PageFooter from "../../PageFooter"; // plasmic-import: MxvU_cyYFXz/component

import { useScreenVariants as useScreenVariantsyX0GVx02K4UjjJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: yX0gVX02K4ujjJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jFJFziXZKhcspnrEU1bpXe/projectcss
import sty from "./PlasmicAbout.module.css"; // plasmic-import: g1huIxoWqF/css

createPlasmicElementProxy;

export type PlasmicAbout__VariantMembers = {};
export type PlasmicAbout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAbout__VariantsArgs;
export const PlasmicAbout__VariantProps = new Array<VariantPropType>();

export type PlasmicAbout__ArgsType = {};
type ArgPropType = keyof PlasmicAbout__ArgsType;
export const PlasmicAbout__ArgProps = new Array<ArgPropType>();

export type PlasmicAbout__OverridesType = {
  root?: Flex__<"div">;
  analytics?: Flex__<typeof Analytics>;
  pageHeader?: Flex__<typeof PageHeader>;
  navBar?: Flex__<typeof NavBar>;
  h1?: Flex__<"h1">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  pageFooter?: Flex__<typeof PageFooter>;
};

export interface DefaultAboutProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAbout__RenderFunc(props: {
  variants: PlasmicAbout__VariantsArgs;
  args: PlasmicAbout__ArgsType;
  overrides: PlasmicAbout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyX0GVx02K4UjjJ()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___1AqDg)}>
            <Analytics
              data-plasmic-name={"analytics"}
              data-plasmic-override={overrides.analytics}
              className={classNames("__wab_instance", sty.analytics)}
            />

            <PageHeader
              data-plasmic-name={"pageHeader"}
              data-plasmic-override={overrides.pageHeader}
              className={classNames("__wab_instance", sty.pageHeader)}
            />

            <NavBar
              data-plasmic-name={"navBar"}
              data-plasmic-override={overrides.navBar}
              className={classNames("__wab_instance", sty.navBar)}
            />

            <section
              className={classNames(projectcss.all, sty.section__x3K9D)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__etw6U)}>
              <section
                className={classNames(projectcss.all, sty.section__aNi3V)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"About"}
                </h1>
                <section
                  className={classNames(projectcss.all, sty.section___6UI7)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fWEdo)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9GnCx
                      )}
                    >
                      {(() => {
                        const child$Props = {
                          arrows: false,
                          autoplay: true,
                          autoplaySpeed: 5000,
                          beforeChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "currentSlide",
                              ["sliderCarousel", "currentSlide"],
                              SliderWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          centerMode: false,
                          className: classNames(
                            "__wab_instance",
                            sty.sliderCarousel
                          ),
                          initialSlide: generateStateValueProp($state, [
                            "sliderCarousel",
                            "currentSlide"
                          ]),
                          ref: ref => {
                            $refs["sliderCarousel"] = ref;
                          },
                          sliderScopeClassName: sty["sliderCarousel__slider"]
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "currentSlide",
                              plasmicStateName: "sliderCarousel.currentSlide"
                            }
                          ],
                          [],
                          SliderWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <SliderWrapper
                            data-plasmic-name={"sliderCarousel"}
                            data-plasmic-override={overrides.sliderCarousel}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gDwp7
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___9G7Hs)}
                                displayHeight={"428px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"128.37%"}
                                src={{
                                  src: "/plasmic/red_crown/images/img0239MinJpg.jpg",
                                  fullWidth: 6960,
                                  fullHeight: 4640,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__mBlir
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__fGo76)}
                                displayHeight={"443px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"100%"}
                                src={{
                                  src: "/plasmic/red_crown/images/img0102Jpg.jpg",
                                  fullWidth: 6960,
                                  fullHeight: 4640,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kbrdd
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__mTMcN)}
                                displayHeight={"434px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"auto"}
                                src={{
                                  src: "/plasmic/red_crown/images/rc2Jpg.jpg",
                                  fullWidth: 2700,
                                  fullHeight: 1519,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>
                          </SliderWrapper>
                        );
                      })()}
                    </div>
                    <section
                      className={classNames(projectcss.all, sty.section__m3HBj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jzziC
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {
                              "Red Crown started in May of 2023 and currently serves the Raleigh, Durham, and Chapel Hill areas. In 2024, we aim to spread to Charlotte, Denver, and Richmond. Red Crown strives to create music events that are safe spaces for all individuals. "
                            }
                          </span>
                          <React.Fragment>{"\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {""}
                          </span>
                          <React.Fragment>{"\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {
                              "Red Crown currently is operated by Rusty, a music producer, audio engineer, and DJ. Rusty has worked in the wedding DJ and live audio business since 2005 and started producing music in 2019. Rusty is skilled in multi-genre blending and enjoys blurring the lines between genres"
                            }
                          </span>
                        </React.Fragment>
                      </div>
                    </section>
                  </div>
                </section>
              </section>
              <PageFooter
                data-plasmic-name={"pageFooter"}
                data-plasmic-override={overrides.pageFooter}
                className={classNames("__wab_instance", sty.pageFooter)}
              />
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ku6F7
            )}
          >
            {"Red wuz here"}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "analytics",
    "pageHeader",
    "navBar",
    "h1",
    "sliderCarousel",
    "pageFooter"
  ],
  analytics: ["analytics"],
  pageHeader: ["pageHeader"],
  navBar: ["navBar"],
  h1: ["h1"],
  sliderCarousel: ["sliderCarousel"],
  pageFooter: ["pageFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  analytics: typeof Analytics;
  pageHeader: typeof PageHeader;
  navBar: typeof NavBar;
  h1: "h1";
  sliderCarousel: typeof SliderWrapper;
  pageFooter: typeof PageFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAbout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAbout__VariantsArgs;
    args?: PlasmicAbout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAbout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAbout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAbout__ArgProps,
          internalVariantPropNames: PlasmicAbout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAbout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbout";
  } else {
    func.displayName = `PlasmicAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicAbout = Object.assign(
  // Top-level PlasmicAbout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    analytics: makeNodeComponent("analytics"),
    pageHeader: makeNodeComponent("pageHeader"),
    navBar: makeNodeComponent("navBar"),
    h1: makeNodeComponent("h1"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    pageFooter: makeNodeComponent("pageFooter"),

    // Metadata about props expected for PlasmicAbout
    internalVariantProps: PlasmicAbout__VariantProps,
    internalArgProps: PlasmicAbout__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAbout;
/* prettier-ignore-end */
